###############################
start with docker compose file
###############################
docker-compose up -d volume
docker-compose up -d config-seed
docker-compose up -d consul
docker-compose up -d vault
docker-compose up -d vault-worker
docker-compose up -d kong-db
docker-compose up -d kong-migrations
docker-compose up -d kong
docker-compose up -d edgex-proxy


#################################
start the edgex serivces manually
#################################

//create service for each edgex microservice 
curl -i -X POST --url http://localhost:8001/services/ -d "name=coredata" -d "host=192.168.1.153" -d "port=48080" -d "protocol=http"

curl -i -X POST --url http://localhost:8001/services/ -d "name=metadata" -d "host=192.168.1.151" -d "port=48081" -d "protocol=http"

curl -i -X POST --url http://localhost:8001/services/ -d "name=command" -d "host=192.168.1.151" -d "port=48082" -d "protocol=http"

curl -i -X POST --url http://localhost:8001/services/ -d "name=notifications" -d "host=192.168.1.151" -d "port=48060" -d "protocol=http"


//create route for the service
curl -i -X POST --url http://localhost:8001/services/coredata/routes -d "paths[]=/coredata" -d "hosts[] = edgex"

curl -i -X POST --url http://localhost:8001/services/metadata/routes -d "paths[]=/metadata"

curl -i -X POST --url http://localhost:8001/services/command/routes -d "paths[]=/command"

curl -i -X POST --url http://localhost:8001/services/notifications/routes -d "paths[]=/notifications"

curl -i -X POST --url http://localhost:8001/services/headertest/routes -d "paths[]=/headertest"

curl -i -X POST --url http://localhost:8001/services/headercheck/routes -d "paths[]=/headercheck"

//use below to access the microservice through proxy
curl -i -X GET --url http://localhost:8000/coredata/api/v1/ping

//if use postman, we need to enable postman interceptor as header "host" is restricted and it will be blocked by default unless interceptor is enabled.


//enable plugins ( auth, log etc ) for kong. we are using JWT here for api1 right now, so a request to coredata will be denied if there is no jwt.
curl -X POST http://localhost:8001/services/coredata/plugins -d "name=jwt" 

// for testing header parsing
curl -X POST http://localhost:8001/services/headertest/plugins -d "name=jwt" 

//create a consumer "adam" for at kong so that ibm can access coredata service
curl -X POST http://localhost:8001/consumers -d "username=adam"
		
//use below to create JWT credential after creating consumer adam,
curl -X POST http://localhost:8001/consumers/adam/jwt -H "Content-Type: application/x-www-form-urlencoded"

//we can delete the jwt credential later with url below, id is what we got from the url above
curl -X DELETE http://localhost:8001/consumers/adam/jwt/{id}

// use this to get the jwt token for the consumer 
curl -X GET http://localhost:8001/consumers/adam/jwt

curl -i -X GET --url http://localhost:8000/coredata/api/v1/ping -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJiejRraVlOVlV0N0V2MDVnYVdNV1Z3eHl4TVBON0R3MCIsInVzZXJuYW1lIjoiYWRhbSJ9.ML04_4Fg-GV19BpXyFVKpkMvR5Km4_p07v_41nJ-KJs"

//go to https://jwt.io/ and use information below to get JWT token. notice iss is the key we got when creating jwt token, and uncheck secret base64 encoded

header: 
{
  "typ": "JWT",
  "alg": "HS256"  
}

payload data
{
  "iss": "26DecM5b5pWlDWog1S4fxmYVV14I3Lb7"
}

//use this below to access the resource 
curl -i -X GET --url http://localhost:8000/coredata/api/v1/ping -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2pWeXY0MWt2WkRJOWhoSkcySjhMVnRuMU9YNzYxRCIsInVzZXJuYW1lIjoiYWRhbSJ9.WAm4_M-BkGDFPqLV-CbSWsJNTONsvZtoZJ0jJ8hh5KE" 

//access resource with query string with jwt
curl -i -X GET --url http://localhost:8000/admin/consumers?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5M3V3cmZBc0xzS2Qwd1JnckVFdlRzQloxSmtYOTRRciIsImFjY291bnQiOiJhZG1pbmlzdHJhdG9yIn0.em8ffitqrd59_DeYKfQkTZGtUA1T99NikETwtedOgHQ


//access resource with cookie with jwt. need to set config.cookie_names which is disabled by default
curl -i -X GET --url http://localhost:8000/coredata/api/v1/ping -b "jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIyNkRlY001YjVwV2xEV29nMVM0ZnhtWVZWMTRJM0xiNyIsInVzZXJuYW1lIjoiYWRhbSJ9.Y99JSjJSEZBrfknnxiHFh5Mn2VsZsdr7QZPXT4sjc0s"

############################
add cert to edgex.command
############################
curl -i -X POST http://localhost:8001/certificates -F "cert=@res\edgex.com.crt" -F "key=@res\edgex.com.key" -F "snis=edgex.com"


//service id for command microservice, this can be found from GET localhost:8001/services 
service.id: 4ed734fe-0585-489b-b73b-ca5572bc4acc

//enable ssl for command microservice 
curl -i -X POST http://localhost:8001/routes -d "hosts[]=edgex.com" -d "service.id=4ed734fe-0585-489b-b73b-ca5572bc4acc"

//access the resource with ssl enabled
curl -k -v https://localhost:8443/test1/headercheck -H 'host:edgex.com'


////////////////////////////////
//config oAuth2 with KONG
////////////////////////////////
curl -X POST http://localhost:8001/services/test/plugins --data "name=oauth2"  --data "config.scopes=email,phone,address" --data "config.mandatory_scope=true" --data "config.enable_client_credentials=true"

//create a consumer 
curl -X POST http://localhost:8001/consumers/ -data "username=adam"

//enable oauth2 for consumer
curl -X POST "http://localhost:8001/consumers/user123/oauth2" --data "name=test" --data "client_id=test" --data "client_secret=test"  --data "redirect_uri=http://www.yahoo.com/"


// create an application
curl -X POST http://localhost:8001/consumers/adam/oauth2 -d "name=TestApp" -d "redirect_uri=http://localhost:8000/metadata/api/v1/ping"


//get access token for the application
curl -k -v https://localhost:8443/oauth2/token -H "Host: test.com" -d "client_id=test&grant_type=client_credentials" -d "client_secret=test" -d "scope=email"


//access kong on ssl 
curl -k -v https://localhost:8443/admin/routes?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5M3V3cmZBc0xzS2Qwd1JnckVFdlRzQloxSmtYOTRRciIsImFjY291bnQiOiJhZG1pbmlzdHJhdG9yIn0.em8ffitqrd59_DeYKfQkTZGtUA1T99NikETwtedOgHQ


# setup acl plugin for KONG
curl -i -X POST --url http://localhost:8001/plugins/ --data "name=acl" --data "config.whitelist=group1, group2" --data "config.hide_groups_header=true"
curl -X POST http://kong:8001/consumers/tom/acls --data "group=group1"

########################################
# Setup vault dev server for testing
########################################
1.  vault  server -dev
2.  set VAULT_ADDR=http://127.0.0.1:8200
3.  vault status 
4.  vault write secret/edgex/cert cert=@edgex.com.crt key=@edgex.com.key
5.  valut list secret/edgex/
5. curl --header "X-Vault-Token: 232d6e0a-3a09-1090-aa08-b303f28c05e1" --request GET http://127.0.0.1:8200/v1/secret/edgex/cert


curl -i -X POST --url http://localhost:8001/services/ -d "name=hd" -d "host=192.168.1.153" -d "port=3000" -d "protocol=http"
curl -i -X POST --url http://localhost:8001/services/hd/routes -d "paths[]=/hd"
curl -X POST http://localhost:8001/services/hd/plugins -d "name=jwt" 
curl -k -v https://localhost:8443/hd/headercheck?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5M3V3cmZBc0xzS2Qwd1JnckVFdlRzQloxSmtYOTRRciIsImFjY291bnQiOiJhZG1pbmlzdHJhdG9yIn0.em8ffitqrd59_DeYKfQkTZGtUA1T99NikETwtedOgHQ

curl -k -v https://localhost:8443/hd/headercheck?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTTE5LZnlRZEdScTVtUTBVNUpBTVhaUlNSMmhFaFhWOSIsImFjY291bnQiOiJqYWNrMSJ9.PXoS3msPZ5xDPymEGUGCzHa9kn2K39lzb8BToy6815s

//enable key authentication for admin service
curl -X POST http://localhost:8001/services/admin/plugins --data "name=key-auth"
curl -X POST http://localhost:8001/consumers/administrator/key-auth -d "key=edgex"
//access service with key auth
curl http://localhost:8000/admin/services?apikey=edgex.com

curl -k -v https://localhost:8443/admin/services?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJUR0hTc2I5cldTTzlncnBGd2J0am16NnFyMUczcWVRayIsImFjY291bnQiOiJ0b20ifQ.Y9Noqvuj52vGkFDrYaI8KCBcWk1XdlTp6N3HUCvscso
curl -k -v https://localhost:8443/admin/services?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJxdjhKM2RXWUptVXBJSVp2SXNpN1d3S0Vtc1NwV0lXOCIsImFjY291bnQiOiJ0b20ifQ.Ap7xwyWQEBNZ9QVqFJAhCe0Y87oHYE0Z2Qh3fXbpxiY
>docker run -it -d tzeng/edgexproxy sh
docker exec -it e31afaafbef2 sh


curl -X POST http://localhost:8001/plugins --data "name=ssl" --data "config.cert=@test.crt" --data "config.key=@test.key" --data "config.only_https=true"

curl -i -X POST http://localhost:8001/certificates \
    -F "cert=@/path/to/cert.pem" \
    -F "key=@/path/to/cert.key" \
    -F "snis=ssl-example.com

curl -X POST http://kong:8001/services/coredata/plugins --data "name=ssl"  --data "config.cert=@test.crt" --data "config.key=@test.key" --data "config.only_https=true"

#######################
Verify the credential pairs in the vault 
#######################
curl -k --header "X-Vault-Token: s.JCgXTjP7fmUnt5YAvPy73XCG" https://127.0.0.1:8200/v1/secret/edgex/mongo/coredata
curl -k --header "X-Vault-Token: s.JCgXTjP7fmUnt5YAvPy73XCG" https://127.0.0.1:8200/v1/secret/edgex/coredata/mongodb
